#!/usr/bin/env python
#
#  Michael Kuiper <kuiper.mike@gmail.com>
#

"""
mmdwf (md workflow) \033[2m
mdwf is a python program used to help setup, run and monitor multiple molecular 
dynamics jobs run on a cluster based on a customisable directory structure. 

\033[22mUsage: mdwf (options) [<dir>] 
       mdwf -h |--help 
\033[2m
Options:
  -h --help         Show this screen. 
  -m --monitor      Monitor Job status on cluster. 
  -i --initialize   Initialize jobs directories in /Main_Job_Dir. 
  -p --populate     Populate or update job directories with job scripts. 
  -c --checkjob     Checks job input before running simulations.
  -b --benchmark    Setup benchmarking runs for job optimization. 
  -s --start        Start all jobs in the /Main_Job_Dir.
  -r --production   Restart all production jobs in /Main_Job_Dir.
  --recover         Recover and cleanup stopped jobs. 
  --stop_all_jobs   Stops all running jobs. 
  --init_new_round  Initializes new Job round.  
  --erase_all_data  Erases all job data. Use with caution!
  --new_job_dir     Create new job directory.
  --clone           Clone directory structure without data. 
"""

import sys
import os 
from mdwf_lib import mdwf_functions as mdwf
from mdwf_lib import docopt

c0  = '\033[0m'      # default
cc1 = '\033[2m'      # default
c6  = '\033[34;1m'   # light blue


def main():
    args = docopt(__doc__, version=0.1)  # create argument dictionary
    arg_list = args.keys()   
    action = '--help'                    # default action 
    for i in arg_list: 
        if args[i] == True:
            print "{}mdwf action:{}{}".format(cc1,c0,i)
            action = i 
    if action == '--help':
        print __doc__
    else:
        process(action)

def process(action):
    if action == '--monitor': 
        print "{}monitoring job status:".format(cc1)
        mdwf.monitor_jobs()

    if action == '--initialize': 
        print "{}initializing job directories".format(cc1)
        mdwf.initialize_job_directories()

    if action == '--populate': 
        print "{}populating job directories:".format(cc1)
        mdwf.populate_job_directories()

    if action == '--checkjob':
        print "{}checking job input:".format(cc1) 
        mdwf.check_job()

    if action == '--benchmark':
        print "benchmarking job:".format(cc1) 
        mdwf.benchmark()

    if action == '--start':
        print "starting jobs:".format(cc1) 
        mdwf.start_all_jobs()

    if action == '--production':
        print "restarting production jobs:".format(cc1) 
        mdwf.restart_all_production_jobs()

    if action == '--recover':
        print "recovering and restoring crashed jobs:".format(cc1) 
        mdwf.recover_all_jobs()

    if action == '--stop_all_jobs':
        print "stopping all jobs:".format(cc1) 
        mdwf.stop_jobs()

    if action == '--init_new_round':
        print "setting up new job rounds:".format(cc1)
        mdwf.new_round()

    if action == '--erase_all_data':
        mdwf.erase_all_data()

    if action == '--clone':
        print "cloning job_directory:".format(cc1) 
        mdwf.clone()

if __name__ == '__main__':

    main()
